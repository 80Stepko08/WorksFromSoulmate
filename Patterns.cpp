#define WIDTH LED_COLS
#define HEIGHT LED_ROWS

//// ----------------------------- Patterns ------------------------------
//(c)stepko
//Remastered version
//16.03.21
//Idea from https://github.com/vvip-68/GyverPanelWiFi/blob/db19a5559c5b3818c20542380e1422d337cc5113/firmware/GyverPanelWiFi_v1.10/patterns.ino

#define NEW_TIME 25
#define SubPix 0//isn't done
#define XSpeed 0.2
#define YSpeed 0.1
#define size 1
#define SHIFT_HUE 1
CHSV colorMR[12] = {
  CHSV(0, 0, 0), // 0 - Black
  CHSV(HUE_RED, 255, 255), // 1 - Red
  CHSV(HUE_GREEN, 255, 255), // 2 - Green
  CHSV(HUE_BLUE, 255, 255), // 3 - Blue
  CHSV(HUE_YELLOW, 255, 255), // 4 - Yellow
  CHSV(0, 0, 220), // 5 - White
  CHSV(0, 255, 255), // 6 - плавно меняеться в цикле (фон)
  CHSV(96, 255, 255), // 7 - цвет равен 6 но +64
  CHSV(HUE_ORANGE, 255, 255),
  CHSV(HUE_PINK, 255, 255),
  CHSV(HUE_PURPLE, 255, 255),
  CHSV(HUE_AQUA, 255, 255),
};
#define MAX_PATTERN 38
typedef uint16_t Pattern[10][10];

static
const Pattern patterns[] PROGMEM = {
  { // 0 fish ********
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 }, { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 }, { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 }, { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 }, { 7, 7, 3, 3, 3, 7, 7, 7, 3, 7 }, { 7, 3, 3, 3, 3, 3, 7, 3, 3, 7 }, { 3, 0, 3, 3, 3, 3, 3, 3, 7, 7 }, { 3, 3, 3, 3, 3, 3, 3, 3, 3, 7 }, { 7, 3, 3, 3, 3, 3, 7, 3, 3, 7 }, { 7, 7, 3, 3, 3, 7, 7, 7, 3, 7 },
  },
  { // 1 zigzag ********
    { 6, 6, 6, 6, 6, 7, 7, 7, 7, 7 },
    { 7, 6, 6, 6, 6, 6, 7, 7, 7, 7 },
    { 7, 7, 6, 6, 6, 6, 6, 7, 7, 7 },
    { 7, 7, 7, 6, 6, 6, 6, 6, 7, 7 },
    { 7, 7, 7, 7, 6, 6, 6, 6, 6, 7 },
    { 7, 7, 7, 7, 7, 6, 6, 6, 6, 6 },
    { 7, 7, 7, 7, 6, 6, 6, 6, 6, 7 },
    { 7, 7, 7, 6, 6, 6, 6, 6, 7, 7 },
    { 7, 7, 6, 6, 6, 6, 6, 7, 7, 7 },
    { 7, 6, 6, 6, 6, 6, 7, 7, 7, 7 },
  },
  { // 2 note *********
    { 6, 6, 6, 6, 6, 5, 5, 5, 6, 6 },
    { 6, 6, 6, 6, 6, 5, 6, 6, 5, 6 },
    { 6, 6, 6, 6, 6, 5, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 5, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 5, 6, 6, 6, 6 },
    { 6, 6, 5, 5, 5, 5, 6, 6, 6, 6 },
    { 6, 5, 5, 5, 5, 5, 6, 6, 6, 6 },
    { 6, 6, 5, 5, 5, 6, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 5, 6, 6, 6, 6 },
  },
  { // 3 diamond *********
    { 6, 6, 6, 6, 7, 7, 7, 6, 6, 6 },
    { 6, 6, 6, 7, 7, 7, 7, 7, 6, 6 },
    { 6, 6, 7, 7, 7, 7, 7, 7, 7, 6 },
    { 6, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
    { 6, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
    { 6, 6, 7, 7, 7, 7, 7, 7, 7, 6 },
    { 6, 6, 6, 7, 7, 7, 7, 7, 6, 6 },
    { 6, 6, 6, 6, 7, 7, 7, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 7, 6, 6, 6, 6 },
  },
  { // 4 heart *********
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 1, 1, 6, 6, 6, 1, 1, 6 },
    { 6, 1, 1, 1, 1, 6, 1, 1, 1, 1 },
    { 6, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
    { 6, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
    { 6, 6, 1, 1, 1, 1, 1, 1, 1, 6 },
    { 6, 6, 1, 1, 1, 1, 1, 1, 1, 6 },
    { 6, 6, 6, 1, 1, 1, 1, 1, 6, 6 },
    { 6, 6, 6, 6, 1, 1, 1, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 1, 6, 6, 6, 6 },
  },
  { // 5 pattern(0) ********
    { 6, 6, 6, 6, 5, 5, 6, 6, 6, 6 },
    { 6, 5, 5, 6, 6, 6, 6, 5, 5, 6 },
    { 6, 5, 6, 6, 5, 5, 6, 6, 5, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 5, 6, 5, 6, 5, 5, 6, 5, 6, 5 },
    { 5, 6, 5, 6, 5, 5, 6, 5, 6, 5 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 5, 6, 6, 5, 5, 6, 6, 5, 6 },
    { 6, 5, 5, 6, 6, 6, 6, 5, 5, 6 },
    { 6, 6, 6, 6, 5, 5, 6, 6, 6, 6 },
  },
  { // 6 cell *********
    { 6, 6, 6, 7, 7, 7, 7, 7, 7, 6 },
    { 6, 6, 6, 6, 7, 7, 7, 7, 6, 6 },
    { 6, 6, 6, 6, 6, 7, 7, 6, 6, 6 },
    { 7, 7, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 7, 7, 7, 6, 6, 6, 6, 6, 6, 7 },
    { 7, 7, 7, 7, 6, 6, 6, 6, 7, 7 },
    { 7, 7, 7, 6, 6, 6, 6, 6, 6, 7 },
    { 7, 7, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 7, 7, 6, 6, 6 },
    { 6, 6, 6, 6, 7, 7, 7, 7, 6, 6 },
  },
  { // 7 emoji ********* 
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 4, 4, 4, 4, 4, 6, 6, 6 },
    { 6, 4, 4, 1, 4, 1, 4, 4, 6, 6 },
    { 6, 4, 4, 4, 4, 4, 4, 4, 6, 6 },
    { 6, 4, 4, 4, 4, 4, 4, 4, 6, 6 },
    { 6, 4, 1, 4, 4, 4, 1, 4, 6, 6 },
    { 6, 4, 4, 1, 1, 1, 4, 4, 6, 6 },
    { 6, 6, 4, 4, 4, 4, 4, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
  },
  { // 8 zigzag(2) ********** 
    { 6, 0, 7, 7, 7, 7, 7, 0, 6, 6 },
    { 6, 6, 0, 7, 7, 7, 0, 6, 6, 6 },
    { 6, 6, 6, 0, 7, 0, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 0, 6, 6, 6, 6, 0 },
    { 0, 6, 6, 6, 6, 6, 6, 6, 0, 7 },
    { 7, 0, 6, 6, 6, 6, 6, 0, 7, 7 },
    { 7, 7, 0, 6, 6, 6, 0, 7, 7, 7 },
    { 7, 7, 7, 0, 6, 0, 7, 7, 7, 7 },
    { 7, 7, 7, 7, 0, 7, 7, 7, 7, 0 },
    { 0, 7, 7, 7, 7, 7, 7, 7, 0, 6 },
  },
  { // 9 strips ********* 
    { 6, 6, 6, 6, 6, 6, 7, 7, 7, 7 },
    { 7, 6, 6, 6, 6, 6, 6, 7, 7, 7 },
    { 7, 7, 6, 6, 6, 6, 6, 6, 7, 7 },
    { 7, 7, 7, 6, 6, 6, 6, 6, 6, 7 },
    { 7, 7, 7, 7, 6, 6, 6, 6, 6, 6 },
    { 6, 7, 7, 7, 7, 6, 6, 6, 6, 6 },
    { 6, 6, 7, 7, 7, 7, 6, 6, 6, 6 },
    { 6, 6, 6, 7, 7, 7, 7, 6, 6, 6 },
    { 6, 6, 6, 6, 7, 7, 7, 7, 6, 6 },
    { 6, 6, 6, 6, 6, 7, 7, 7, 7, 6 },
  },
  { // 10 waves ********** 
    { 6, 7, 7, 7, 6, 6, 7, 7, 7, 6 },
    { 6, 6, 7, 6, 6, 6, 6, 7, 6, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 7, 6, 6, 6, 7, 7, 6, 6, 6, 7 },
    { 7, 7, 6, 7, 7, 7, 7, 6, 7, 7 },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
  },
  { // 11 scales *********
    { 6, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
    { 7, 6, 7, 7, 7, 7, 7, 7, 7, 6 },
    { 7, 6, 6, 7, 7, 7, 7, 7, 6, 6 },
    { 7, 7, 6, 6, 6, 6, 6, 6, 6, 7 },
    { 7, 7, 7, 6, 6, 6, 6, 6, 7, 7 },
    { 7, 7, 7, 7, 6, 6, 6, 7, 7, 7 },
    { 7, 7, 7, 7, 7, 6, 7, 7, 7, 7 },
    { 7, 7, 7, 7, 6, 7, 6, 7, 7, 7 },
    { 7, 7, 6, 6, 7, 7, 7, 6, 6, 6 },
    { 6, 6, 7, 7, 7, 7, 7, 7, 7, 6 },
  },
  { // 12 Вишиванка ********
    { 1, 5, 5, 5, 0, 0, 5, 5, 5, 1 },
    { 5, 1, 1, 0, 5, 5, 0, 1, 1, 5 },
    { 5, 5, 0, 1, 5, 5, 1, 0, 5, 5 },
    { 5, 0, 5, 1, 5, 5, 1, 5, 0, 5 },
    { 0, 5, 5, 5, 1, 1, 5, 5, 5, 0 },
    { 0, 5, 5, 5, 1, 1, 5, 5, 5, 0 },
    { 5, 0, 5, 1, 5, 5, 1, 5, 0, 5 },
    { 5, 5, 0, 1, 5, 5, 1, 0, 5, 5 },
    { 5, 1, 1, 0, 5, 5, 0, 1, 1, 5 },
    { 1, 5, 5, 5, 0, 0, 5, 5, 5, 1 },
  },
  { // 13 braid ********* 
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 6 },
    { 7, 7, 7, 7, 7, 7, 7, 7, 6, 7 },
    { 7, 7, 7, 7, 7, 7, 7, 6, 6, 6 },
    { 6, 7, 7, 7, 7, 7, 6, 6, 6, 6 },
    { 6, 6, 7, 7, 7, 6, 7, 6, 6, 6 },
    { 6, 6, 6, 7, 6, 7, 7, 7, 6, 6 },
    { 6, 6, 6, 6, 7, 7, 7, 7, 7, 6 },
    { 6, 6, 6, 7, 7, 7, 7, 7, 7, 7 },
    { 7, 6, 7, 7, 7, 7, 7, 7, 7, 7 },
    { 6, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
  },
  { // 14 chess ********
    { 6, 6, 6, 6, 6, 5, 5, 5, 5, 5 },
    { 6, 6, 6, 6, 6, 5, 5, 5, 5, 5 },
    { 6, 6, 6, 6, 6, 5, 5, 5, 5, 5 },
    { 6, 6, 6, 6, 6, 5, 5, 5, 5, 5 },
    { 6, 6, 6, 6, 6, 5, 5, 5, 5, 5 },
    { 5, 5, 5, 5, 5, 6, 6, 6, 6, 6 },
    { 5, 5, 5, 5, 5, 6, 6, 6, 6, 6 },
    { 5, 5, 5, 5, 5, 6, 6, 6, 6, 6 },
    { 5, 5, 5, 5, 5, 6, 6, 6, 6, 6 },
    { 5, 5, 5, 5, 5, 6, 6, 6, 6, 6 },
  },
  { // 15 diamonds ********
    { 0, 6, 6, 6, 6, 6, 6, 6, 6, 0 },
    { 7, 0, 6, 6, 6, 6, 6, 6, 0, 7 },
    { 7, 7, 0, 6, 6, 6, 6, 0, 7, 7 },
    { 7, 7, 7, 0, 6, 6, 0, 7, 7, 7 },
    { 7, 7, 7, 7, 0, 0, 7, 7, 7, 7 },
    { 7, 7, 7, 7, 0, 0, 7, 7, 7, 7 },
    { 7, 7, 7, 0, 6, 6, 0, 7, 7, 7 },
    { 7, 7, 0, 6, 6, 6, 6, 0, 7, 7 },
    { 7, 0, 6, 6, 6, 6, 6, 6, 0, 7 },
    { 0, 6, 6, 6, 6, 6, 6, 6, 6, 0 },
  },
  { // 16 pattern(1) ********
    { 6, 6, 6, 6, 6, 5, 5, 5, 5, 5 },
    { 6, 5, 5, 5, 6, 5, 7, 7, 7, 5 },
    { 6, 5, 6, 5, 6, 5, 7, 5, 7, 5 },
    { 6, 5, 5, 5, 6, 5, 7, 7, 7, 5 },
    { 6, 6, 6, 6, 6, 5, 5, 5, 5, 5 },
    { 5, 5, 5, 5, 5, 6, 6, 6, 6, 6 },
    { 5, 7, 7, 7, 5, 6, 5, 5, 5, 6 },
    { 5, 7, 5, 7, 5, 6, 5, 6, 5, 6 },
    { 5, 7, 7, 7, 5, 6, 5, 5, 5, 6 },
    { 5, 5, 5, 5, 5, 6, 6, 6, 6, 6 },
  },
  { // 17 emoji *********
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 6, 6, 6, 6, 6, 0, 0, 0 },
    { 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 },
    { 0, 6, 5, 5, 6, 5, 5, 6, 0, 0 },
    { 0, 6, 6, 6, 6, 6, 6, 6, 0, 0 },
    { 0, 6, 0, 6, 6, 6, 0, 6, 0, 0 },
    { 0, 6, 6, 0, 0, 0, 6, 6, 0, 0 },
    { 0, 0, 6, 6, 6, 6, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  },
  { // 18 circles ********
    { 6, 6, 6, 5, 5, 5, 5, 6, 6, 6 },
    { 6, 6, 5, 6, 6, 6, 6, 5, 6, 6 },
    { 6, 5, 6, 6, 0, 0, 6, 6, 5, 6 },
    { 5, 6, 6, 0, 6, 6, 0, 6, 6, 5 },
    { 5, 6, 0, 6, 7, 7, 6, 0, 6, 5 },
    { 5, 6, 0, 6, 7, 7, 6, 0, 6, 5 },
    { 5, 6, 6, 0, 6, 6, 0, 6, 6, 5 },
    { 6, 5, 6, 6, 0, 0, 6, 6, 5, 6 },
    { 6, 6, 5, 6, 6, 6, 6, 5, 6, 6 },
    { 6, 6, 6, 5, 5, 5, 5, 6, 6, 6 },
  },
  { // 19 pattern(2) ********
    { 7, 7, 7, 7, 7, 7, 7, 7, 6, 7 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 7 },
    { 7, 6, 7, 7, 7, 7, 6, 7, 6, 7 },
    { 7, 6, 6, 6, 6, 6, 6, 7, 6, 7 },
    { 7, 6, 7, 6, 7, 7, 6, 7, 6, 7 },
    { 7, 6, 7, 6, 7, 7, 6, 7, 6, 7 },
    { 7, 6, 7, 6, 6, 6, 6, 6, 6, 7 },
    { 7, 6, 7, 6, 7, 7, 7, 7, 6, 7 },
    { 7, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 7, 6, 7, 7, 7, 7, 7, 7, 7, 7 },
  },
  { // 20 pattern(3) ********
    { 6, 6, 7, 6, 7, 7, 6, 7, 6, 6 },
    { 6, 6, 7, 6, 7, 7, 6, 7, 6, 6 },
    { 7, 7, 7, 6, 6, 6, 6, 7, 7, 7 },
    { 6, 6, 6, 7, 6, 6, 7, 6, 6, 6 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 6, 6, 6, 7, 6, 6, 7, 6, 6, 6 },
    { 7, 7, 7, 6, 6, 6, 6, 7, 7, 7 },
    { 6, 6, 7, 6, 7, 7, 6, 7, 6, 6 },
    { 6, 6, 7, 6, 7, 7, 6, 7, 6, 6 },
  },
  { // 21 squares ********
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 6, 6, 7, 7, 6, 6, 7, 7, 6, 6 },
    { 6, 6, 7, 7, 6, 6, 7, 7, 6, 6 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 6, 6, 7, 7, 6, 6, 7, 7, 6, 6 },
    { 6, 6, 7, 7, 6, 6, 7, 7, 6, 6 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
  },
  { // 22 pattern(4) ********
    { 6, 6, 6, 6, 7, 7, 6, 6, 6, 6 },
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 6, 7, 6, 6, 7, 6, 6, 6 },
    { 7, 6, 6, 6, 6, 6, 6, 6, 6, 7 },
    { 7, 6, 6, 6, 6, 6, 6, 6, 6, 7 },
    { 6, 6, 6, 7, 6, 6, 7, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 6, 6, 6, 6, 7, 7, 6, 6, 6, 6 },
  },
  { // 23 chains ********
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 6, 6, 6, 0, 0, 6, 6, 6, 0 },
    { 0, 6, 0, 6, 7, 7, 6, 0, 6, 0 },
    { 0, 6, 6, 6, 0, 0, 6, 6, 6, 0 },
    { 0, 0, 7, 0, 0, 0, 0, 7, 0, 0 },
    { 0, 0, 7, 0, 0, 0, 0, 7, 0, 0 },
    { 0, 6, 6, 6, 0, 0, 6, 6, 6, 0 },
    { 0, 6, 0, 6, 7, 7, 6, 0, 6, 0 },
    { 0, 6, 6, 6, 0, 0, 6, 6, 6, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  },
  { // 24 patterns(5) ********
    { 7, 6, 6, 7, 6, 6, 7, 6, 6, 7 },
    { 6, 7, 7, 6, 7, 7, 6, 7, 7, 6 },
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 7, 6, 6, 7, 6, 6, 7, 6, 6, 7 },
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 7, 6, 6, 7, 6, 6, 7, 6, 6, 7 },
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 6, 7, 7, 6, 7, 7, 6, 7, 7, 6 },
    { 7, 6, 6, 7, 6, 6, 7, 6, 6, 7 },
  },
  { // 25 aim ********
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 5, 5, 5, 5, 5, 5, 5, 5, 6 },
    { 6, 5, 6, 6, 6, 6, 6, 6, 5, 6 },
    { 6, 5, 6, 5, 5, 5, 5, 6, 5, 6 },
    { 6, 5, 6, 5, 6, 6, 5, 6, 5, 6 },
    { 6, 5, 6, 5, 6, 6, 5, 6, 5, 6 },
    { 6, 5, 6, 5, 5, 5, 5, 6, 5, 6 },
    { 6, 5, 6, 6, 6, 6, 6, 6, 5, 6 },
    { 6, 5, 5, 5, 5, 5, 5, 5, 5, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
  },
  { // 26 circles(1) ********
    { 0, 0, 11, 0, 0, 0, 0, 11, 0, 0 },
    { 0, 11, 0, 0, 0, 0, 0, 0, 11, 0 },
    { 11, 0, 0, 0, 11, 11, 0, 0, 0, 11 },
    { 0, 0, 0, 11, 0, 0, 11, 0, 0, 0 },
    { 0, 0, 11, 0, 0, 0, 0, 11, 0, 0 },
    { 0, 0, 11, 0, 0, 0, 0, 11, 0, 0 },
    { 0, 0, 0, 11, 0, 0, 11, 0, 0, 0 },
    { 11, 0, 0, 0, 11, 11, 0, 0, 0, 11 },
    { 0, 11, 0, 0, 0, 0, 0, 0, 11, 0 },
    { 0, 0, 11, 0, 0, 0, 0, 11, 0, 0 },
  },
  { // 27 pattern(6) ********
    { 9, 0, 0, 9, 0, 0, 9, 0, 0, 9 },
    { 0, 0, 0, 0, 9, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 9, 9, 0, 0, 0, 0 },
    { 9, 0, 0, 9, 0, 0, 9, 0, 0, 9 },
    { 0, 9, 9, 0, 0, 0, 0, 9, 9, 0 },
    { 0, 9, 9, 0, 0, 0, 0, 9, 9, 0 },
    { 9, 0, 0, 9, 0, 0, 9, 0, 0, 9 },
    { 0, 0, 0, 0, 9, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 9, 9, 0, 0, 0, 0 },
    { 9, 0, 0, 9, 0, 0, 9, 0, 0, 9 },
  },
  { // 28 paattern(7) ********
    { 0, 7, 7, 0, 0, 0, 0, 7, 7, 0 },
    { 7, 7, 7, 0, 7, 7, 0, 7, 7, 7 },
    { 7, 7, 7, 0, 7, 7, 0, 7, 7, 7 },
    { 0, 0, 0, 7, 7, 7, 7, 0, 0, 0 },
    { 0, 7, 7, 7, 0, 0, 7, 7, 7, 0 },
    { 0, 7, 7, 7, 0, 0, 7, 7, 7, 0 },
    { 0, 0, 0, 7, 7, 7, 7, 0, 0, 0 },
    { 7, 7, 7, 0, 7, 7, 0, 7, 7, 7 },
    { 7, 7, 7, 0, 7, 7, 0, 7, 7, 7 },
    { 0, 7, 7, 0, 0, 0, 0, 7, 7, 0 },
  },
  { // 29 pattern(8) ********
    { 7, 7, 7, 6, 6, 6, 6, 7, 7, 7 },
    { 7, 6, 6, 6, 6, 6, 6, 6, 6, 7 },
    { 7, 6, 7, 7, 6, 6, 7, 7, 6, 7 },
    { 6, 6, 7, 7, 7, 7, 7, 7, 6, 6 },
    { 6, 6, 6, 7, 6, 6, 7, 6, 6, 6 },
    { 6, 6, 6, 7, 6, 6, 7, 6, 6, 6 },
    { 6, 6, 7, 7, 7, 7, 7, 7, 6, 6 },
    { 7, 6, 7, 7, 6, 6, 7, 7, 6, 7 },
    { 7, 6, 6, 6, 6, 6, 6, 6, 6, 7 },
    { 7, 7, 7, 6, 6, 6, 6, 7, 7, 7 },
  },
  { // 30 pattern(9) ********
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
  },
  { // 31 pattern(10) ********
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
    { 7, 6, 6, 6, 7, 7, 6, 6, 6, 7 },
    { 6, 6, 7, 6, 7, 7, 6, 7, 6, 6 },
    { 6, 6, 6, 6, 7, 7, 6, 6, 6, 6 },
    { 7, 7, 7, 7, 6, 6, 7, 7, 7, 7 },
    { 7, 7, 7, 7, 6, 6, 7, 7, 7, 7 },
    { 6, 6, 6, 6, 7, 7, 6, 6, 6, 6 },
    { 6, 6, 7, 6, 7, 7, 6, 7, 6, 6 },
    { 7, 6, 6, 6, 7, 7, 6, 6, 6, 7 },
    { 7, 7, 6, 6, 7, 7, 6, 6, 7, 7 },
  },
  { // 32 pattern(11) ********
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
    { 7, 6, 7, 6, 6, 6, 6, 7, 6, 7 },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
    { 7, 6, 7, 6, 6, 6, 6, 7, 6, 7 },
    { 7, 6, 7, 6, 7, 7, 6, 7, 6, 7 },
    { 7, 6, 7, 6, 7, 7, 6, 7, 6, 7 },
    { 7, 6, 7, 6, 6, 6, 6, 7, 6, 7 },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
    { 7, 6, 7, 6, 6, 6, 6, 7, 6, 7 },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
  },
  { // 33 pattern(12) ********
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 7, 6, 7, 7, 7, 7, 7, 7, 6, 7 },
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 6, 7, 6, 7, 7, 7, 7, 6, 7, 6 },
    { 6, 7, 6, 7, 6, 6, 7, 6, 7, 6 },
    { 6, 7, 6, 7, 6, 6, 7, 6, 7, 6 },
    { 6, 7, 6, 7, 7, 7, 7, 6, 7, 6 },
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 7, 6, 7, 7, 7, 7, 7, 7, 6, 7 },
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
  },
  { // 34 roll ********
    { 6, 6, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 6, 7, 7, 7, 7, 7, 7, 6, 7, 6 },
    { 6, 7, 6, 6, 6, 6, 7, 6, 7, 6 },
    { 6, 7, 6, 7, 7, 6, 7, 6, 7, 6 },
    { 6, 7, 6, 7, 6, 6, 7, 6, 7, 6 },
    { 6, 7, 6, 7, 6, 6, 7, 6, 7, 6 },
    { 6, 7, 6, 7, 7, 7, 7, 6, 7, 6 },
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 6, 7, 7, 7, 7, 7, 7, 7, 7, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
  },
  { // 35 pattern(13) ********
    { 7, 6, 6, 7, 6, 6, 7, 6, 6, 7 },
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 6, 6, 7, 6, 6, 6, 6, 7, 6, 6 },
    { 7, 6, 6, 7, 6, 6, 7, 6, 6, 7 },
    { 6, 6, 6, 6, 7, 7, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 7, 7, 6, 6, 6, 6 },
    { 7, 6, 6, 7, 6, 6, 7, 6, 6, 7 },
    { 6, 6, 7, 6, 6, 6, 6, 7, 6, 6 },
    { 6, 7, 6, 6, 6, 6, 6, 6, 7, 6 },
    { 7, 6, 6, 7, 6, 6, 7, 6, 6, 7 },
  },
  { // 36 pattern(14) ********
    { 7, 7, 7, 5, 6, 6, 5, 7, 7, 7 },
    { 7, 0, 7, 5, 6, 6, 5, 7, 0, 7 },
    { 7, 7, 7, 5, 6, 6, 5, 7, 7, 7 },
    { 5, 5, 5, 5, 6, 6, 5, 5, 5, 5 },
    { 6, 6, 6, 6, 5, 5, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 5, 5, 6, 6, 6, 6 },
    { 5, 5, 5, 5, 6, 6, 5, 5, 5, 5 },
    { 7, 7, 7, 5, 6, 6, 5, 7, 7, 7 },
    { 7, 0, 7, 5, 6, 6, 5, 7, 0, 7 },
    { 7, 7, 7, 5, 6, 6, 5, 7, 7, 7 },
  },
  { // 37 pattern(15) ********
    { 7, 6, 6, 6, 7, 7, 6, 6, 6, 7 },
    { 6, 7, 6, 7, 6, 6, 7, 6, 7, 6 },
    { 6, 6, 7, 6, 6, 6, 6, 7, 6, 6 },
    { 6, 7, 6, 6, 7, 7, 6, 6, 7, 6 },
    { 7, 6, 6, 7, 6, 6, 7, 6, 6, 7 },
    { 7, 6, 6, 7, 6, 6, 7, 6, 6, 7 },
    { 6, 7, 6, 6, 7, 7, 6, 6, 7, 6 },
    { 6, 6, 7, 6, 6, 6, 6, 7, 6, 6 },
    { 6, 7, 6, 7, 6, 6, 7, 6, 7, 6 },
    { 7, 6, 6, 6, 7, 7, 6, 6, 6, 7 },
  }
};

bool loadingFlag = true;
byte patternIdx = 23;


CRGB subColor(CRGB col1, CRGB col2, byte l) {
  CRGB col = nblend(col1, col2, l);
  return col;
}

float y_offs = 0; // (float)beatsin16(10, 1, 320)/10; // for X texture move
float x_offs = 0; //t;//(float)beatsin16(12, 1, 320)/10; // for Y texture move
void Patterns(byte id) {
  x_offs += XSpeed;
  y_offs += YSpeed;
  if (SHIFT_HUE) {
    EVERY_N_MILLISECONDS(256) {
      colorMR[6].hue++;
      colorMR[7].hue = colorMR[6].hue + 96;
    }
  }
  FastLED.clear();
      if (SubPix) {
    for (byte y = 0; y < HEIGHT+1; y++) {
    for (byte x = 0; x < WIDTH+1; x++) {
        CRGB color = colorMR[(uint8_t) pgm_read_byte( & (patterns[id][uint8_t((y_offs + y) / size) % 10][uint8_t((x_offs + x) / size) % 10]))];
        CRGB colP1 =  subColor(color, CRGB(0,0,0), (x_offs - (uint8_t) x_offs) * 255);
        CRGB colP2 = subColor(CRGB(0,0,0), color, (x_offs - (uint8_t) x_offs) * 255);
        CRGB col1 = subColor(colP1, CRGB(0, 0, 0), (y_offs - (uint8_t) y_offs) * 255);
        CRGB col2 = subColor(colP2, CRGB(0, 0, 0), (y_offs - (uint8_t) y_offs) * 255);
        CRGB col3 = subColor(CRGB(0, 0, 0),colP1, (y_offs - (uint8_t) y_offs) * 255);
        CRGB col4 = subColor(CRGB(0, 0, 0),colP2, (y_offs - (uint8_t) y_offs) * 255);
      leds[XY(x, HEIGHT - 1 - y)] += col1;
      leds[XY(x-1, HEIGHT - 1 - y)] += col2;
      leds[XY(x, HEIGHT - y)] += col3;
      leds[XY(x-1, HEIGHT - y)] += col4;
    }}} else {
      for (byte y = 0; y < HEIGHT; y++) {
    for (byte x = 0; x < WIDTH; x++) {
      CRGB Color = colorMR[(uint16_t) pgm_read_byte( & (patterns[id][uint16_t((y_offs + y) / size) % 10][uint16_t((x_offs + x) / size) % 10]))];
      leds[XY(x, HEIGHT - 1 - y)] = Color;
    }
  }
}
}
static bool SETUP = true;
void draw() {
  Patterns(patternIdx);
  if (!NEW_TIME == 0) {
    EVERY_N_SECONDS(NEW_TIME) {
      patternIdx++;
      colorMR[6] = CHSV(random8(), 255, 255);
      colorMR[7].hue = colorMR[6].hue + 96; //(beatsin8(1, 0, 255, 0, 127), 255U, 255U);
      if (patternIdx >= MAX_PATTERN) patternIdx = 0;
    }
  }
}